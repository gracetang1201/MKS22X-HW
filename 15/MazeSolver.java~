public class MazeSolver{
    private Maze board;
    private boolean ani;
    public static void main (String[]args) {
	MazeSolver a = new MazeSolver("data2.txt", true);
	a.solve(2);
    }
    public MazeSolver(String filename){
	this(filename, false);
    }

    public MazeSolver(String filename, boolean animate){
	board = new Maze(filename);
	ani=animate;;
    }
    public void solve(){
	solve(1);
    }
    public void solve(int style){
	System.out.println(Maze.colorize(board.toString()));
	Frontier fr;
	boolean astar;
	if(style == 0){
	    fr = new FrontierStack();
	    astar = false;
	}else if(style == 1){
	    fr = new FrontierQueue();
	    astar = false;
	}else if(style == 2){
	    fr = new FrontierPriorityQueue();
	    astar = false;
	}else{
	    fr = new FrontierPriorityQueue();
	    astar = true;
	}
	fr.add(board.getStart());
	while(fr.getSize() > 0){
	    Location curr = fr.next();
	    if(dist(curr, board.getEnd()) == 0){
		board.set(curr.getRow(), curr.getCol(), 'E');
		while(!(curr.getPrev() == null)){
		    curr = curr.getPrev();
		    board.set(curr.getRow(), curr.getCol(), '@');
		}
		board.set(curr.getRow(), curr.getCol(), 'S');
		System.out.println(this);
		return;
	    }
	    try{
		int[] poss = {1, -1};
		for(int num : poss){
		    if(board.get(curr.getRow() + num, curr.getCol()) == ' '){
			int row = curr.getRow() + num;
			int col = curr.getCol();
			Location temp = new Location(row, col, curr, dist(row, col, board.getStart()), dist(row,col,board.getEnd()), astar);
			fr.add(temp);
			board.set(row,col, '?');
		    }
		    if(board.get(curr.getRow(), curr.getCol() + num) == ' '){
			int row = curr.getRow();
			int col = curr.getCol()+num;
			Location temp = new Location(row, col, curr, dist(row, col, board.getStart()), dist(row,col,board.getEnd()),astar);
			fr.add(temp);
			board.set(row,col, '?');
		    }
		}
	    }catch (IndexOutOfBoundsException e){}
	    board.set(curr.getRow(), curr.getCol(), '.');
	    System.out.println(this);
	
	}
    }
    public int dist(Location to, Location from){
	int ans = Math.abs(to.getRow() - from.getRow()) +Math.abs(to.getCol() - from.getCol());
	return ans;
    }
    public int dist(int r, int c, Location to){
	return(Math.abs(to.getRow() - r) + Math.abs(to.getCol() - c));
    }
    public String toString(){
	if(ani){
	    return board.toString(50);
	}
	return board.toString();
    }
    
    
}
