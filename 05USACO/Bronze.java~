import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
 
public class Stompers{
   
    public int[][] elevations;
 
    Stompers(int[][] inputArray){
        elevations = inputArray;
    }
   
    public static void main(String[] args) {
       
 
        int[][] twoD = {{28, 25, 20, 32, 34, 36},
        {27, 25, 20, 20, 30, 34},
        {24, 20, 20, 20, 20, 30},
        {20, 20, 14, 14, 20, 20}};
 
        //Stompers a = new Stompers(twoD);
       
        //System.out.println(toString(a.elevations));
        //a.stomp(1, 4, 4);
        //System.out.println(toString(a.elevations));
 
    }
    public void importFile(File filename) throws FileNotFoundException{
	String coors = "";
        //File f = new File(filename);
        Scanner s = new Scanner(filename);
	int r = s.nextInt();
	System.out.println(r);
	int c = s.nextInt();
	System.out.println(c);
        elevations = new int[r][c];
        int el = s.nextInt();
	System.out.println(el);
        int nc = s.nextInt();
	System.out.println(nc);
        for(int r = 0; r < elevations.length; r++){
            for (int c = 0; c < elevations[r].length; c++){
                elevations[r][c] = s.nextInt();
            }
        }
	for (int i = 1; i <= nc; i++){
	    coors += s.nextLine();
	}
   
    }
    public static String toString(int[][] twoDArray){
        String o = "";
        for (int[] row : twoDArray) {
            for (int e : row){
                o += e;
                o += " ";
            }
            o += "\n";
        }
        return o;
    }
 
    public void stomp(int row, int col, int depth){
	if (
	importFile(ctravel.in);
        int biggest = 0;
        for (int findRow = row - 1; findRow < row + 2; findRow++){
            for (int findCol = col - 1; findCol < col + 2; findCol++){
                if (elevations[findRow][findCol] > biggest){
                    biggest = elevations[findRow][findCol];
                }
            }  
        }
        for (int findRow = row - 1; findRow < row + 2; findRow++){
            for (int findCol = col - 1; findCol < col + 2; findCol++){
                if (elevations[findRow][findCol] > biggest - depth){
                    elevations[findRow][findCol] = biggest - depth;
                }
            }
        }  
    }
 
 
 
}
